<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://rj-price.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rj-price.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-12T14:10:29+00:00</updated><id>https://rj-price.github.io/feed.xml</id><title type="html">Dr. R. Jordan Price</title><subtitle>Dr. R. Jordan Price, Bioinformatician and Molecular Biologist </subtitle><entry><title type="html">Useful Bash Aliases and Functions</title><link href="https://rj-price.github.io/blog/2024/dotfiles/" rel="alternate" type="text/html" title="Useful Bash Aliases and Functions"/><published>2024-07-29T00:00:00+00:00</published><updated>2024-07-29T00:00:00+00:00</updated><id>https://rj-price.github.io/blog/2024/dotfiles</id><content type="html" xml:base="https://rj-price.github.io/blog/2024/dotfiles/"><![CDATA[<p>Working efficiently on the command line can significantly enhance your productivity, especially when you’re frequently performing repetitive tasks. In this post, I’ll share some of my favorite bash aliases and functions that I’ve accumulated from around the web and find incredibly useful. These shortcuts and helpers streamline various tasks, from file operations to Git commands, making your workflow smoother and more efficient.</p> <p><br/></p> <h2 id="general-shortcuts">General Shortcuts</h2> <h3 id="date-and-job-queue">Date and Job Queue</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">Q</span><span class="o">=</span><span class="s2">"date &amp;&amp; squeue --user jnprice"</span>
</code></pre></div></div> <p>This is probably my most used shortcut. When running jobs on our Slurm-based HPC, I like to be able to see the current date and time, as well as the status of my jobs in the queue using <code class="language-plaintext highlighter-rouge">squeue</code>. It’s really handy for keeping track of the time of your job submissions without needing to run multiple commands.</p> <p><br/></p> <h3 id="listing-files">Listing Files</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">lh</span><span class="o">=</span><span class="s2">"ls -lh"</span>
</code></pre></div></div> <p>I often want to list the contents of a directory in the long format so that I can check file sizes and modification time. The <code class="language-plaintext highlighter-rouge">ls -lh</code> command lists files in the current directory with human-readable file sizes. Using this alias makes it easier to quickly see file sizes without needing to interpret byte counts.</p> <p><br/></p> <h3 id="directory-operations">Directory Operations</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">md</span><span class="o">=</span><span class="s2">"mkdir"</span>
<span class="nb">alias </span><span class="nv">rd</span><span class="o">=</span><span class="s2">"rmdir"</span>
</code></pre></div></div> <p>I’m extremely <del>lazy</del> efficient and these aliases simplify the creation and removal of directories. <code class="language-plaintext highlighter-rouge">md</code> for making directories and <code class="language-plaintext highlighter-rouge">rd</code> for removing them. Intuitive and saves me a few keystrokes.</p> <p><br/></p> <h3 id="create-and-navigate">Create and Navigate</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>mkcd<span class="o">()</span> <span class="o">{</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="o">}</span>
</code></pre></div></div> <p>I’m constantly creating directories to keep my analyses organised. This function creates a directory (and any necessary parent directories) and then navigates into it. It’s perfect for when you want to create a new directory and start working in it immediately.</p> <p><br/></p> <h3 id="interactive-file-operations">Interactive File Operations</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias rm</span><span class="o">=</span><span class="s2">"rm -i"</span>
<span class="nb">alias mv</span><span class="o">=</span><span class="s1">'mv -i'</span>
<span class="nb">alias cp</span><span class="o">=</span><span class="s1">'cp -i'</span>
</code></pre></div></div> <p>Like many others, I’ve had some bad experiences using <code class="language-plaintext highlighter-rouge">rm</code> with wildcards. These aliases have saved me several times and make the <code class="language-plaintext highlighter-rouge">rm</code>, <code class="language-plaintext highlighter-rouge">mv</code>, and <code class="language-plaintext highlighter-rouge">cp</code> commands interactive by prompting you before making any changes, preventing accidental deletions or overwrites.</p> <p><br/></p> <h3 id="disk-usage">Disk Usage</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">duh</span><span class="o">=</span><span class="s1">'du -sh ./* ./.*'</span>
</code></pre></div></div> <p>When using a shared system, it’s important to be a considerate user and keep an eye on how much disk space you’re using. This alias calculates disk usage for all files and directories in the current directory, including hidden ones, and presents the information in a human-readable format. It’s very handy for identifying what’s taking up space before a quick tidy up.</p> <p><br/></p> <h2 id="universal-extractor">Universal Extractor</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>extract <span class="o">()</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span><span class="nt">-ne</span> 1 <span class="o">]</span>
  <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"Error: No file specified."</span>
    <span class="k">return </span>1
  <span class="k">fi
  if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="nv">$1</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then
    case</span> <span class="nv">$1</span> <span class="k">in</span>
      <span class="k">*</span>.tar.bz2<span class="p">)</span> <span class="nb">tar </span>xvjf <span class="nv">$1</span>   <span class="p">;;</span>
      <span class="k">*</span>.tar.gz<span class="p">)</span>  <span class="nb">tar </span>xvzf <span class="nv">$1</span>   <span class="p">;;</span>
      <span class="k">*</span>.bz2<span class="p">)</span>     bunzip2 <span class="nv">$1</span>    <span class="p">;;</span>
      <span class="k">*</span>.rar<span class="p">)</span>     unrar x <span class="nv">$1</span>    <span class="p">;;</span>
      <span class="k">*</span>.gz<span class="p">)</span>      <span class="nb">gunzip</span> <span class="nv">$1</span>     <span class="p">;;</span>
      <span class="k">*</span>.tar<span class="p">)</span>     <span class="nb">tar </span>xvf <span class="nv">$1</span>    <span class="p">;;</span>
      <span class="k">*</span>.tbz2<span class="p">)</span>    <span class="nb">tar </span>xvjf <span class="nv">$1</span>   <span class="p">;;</span>
      <span class="k">*</span>.tgz<span class="p">)</span>     <span class="nb">tar </span>xvzf <span class="nv">$1</span>   <span class="p">;;</span>
      <span class="k">*</span>.zip<span class="p">)</span>     unzip <span class="nv">$1</span>      <span class="p">;;</span>
      <span class="k">*</span>.Z<span class="p">)</span>       uncompress <span class="nv">$1</span> <span class="p">;;</span>
      <span class="k">*</span>.7z<span class="p">)</span>      7z x <span class="nv">$1</span>       <span class="p">;;</span>
      <span class="k">*</span><span class="p">)</span>         <span class="nb">echo</span> <span class="s2">"'</span><span class="nv">$1</span><span class="s2">' cannot be extracted via extract"</span> <span class="p">;;</span>
    <span class="k">esac</span>
  <span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"'</span><span class="nv">$1</span><span class="s2">' is not a valid file"</span>
  <span class="k">fi</span>
<span class="o">}</span>
</code></pre></div></div> <p>Whether you’ve generated it yourself or you’ve downloaded it from a public database, lots of data is compressed to save space. This versatile function handles the extraction of almost all of the compressed file types that you’re likely to come across. The best thing is that you only need to remember one command to extract files, regardless of their format.</p> <p><br/></p> <h2 id="git-aliases">Git Aliases</h2> <p>Using Git for version control is obviously important for providing a history of any changes made, enabling easy tracking, reversing, and keeping track of modifications over time. These last few shortcuts make working with Git just a bit easier.</p> <p><br/></p> <h3 id="git-status">Git Status</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">gstatus</span><span class="o">=</span><span class="s1">'git status -sb'</span>

</code></pre></div></div> <p>This alias provides a succinct summary of the Git status, showing changes in a brief format which I find easier and quicker to read than the normal output.</p> <p><br/></p> <h3 id="git-branch">Git Branch</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">gbranch</span><span class="o">=</span><span class="s2">"git checkout -b "</span>

</code></pre></div></div> <p>You can use this shortcut to quickly create and switch to a new Git branch, making it a simple way to streamline branch management.</p> <p><br/></p> <h3 id="lazy-git-commit">Lazy Git Commit</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>lazygit<span class="o">()</span> <span class="o">{</span>
    git add <span class="nb">.</span>
    git commit <span class="nt">-m</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
    git push
<span class="o">}</span>

</code></pre></div></div> <p><br/></p> <p>The ultimate function for any time conscious bioinformatician! This stages all changes, commits them with a specified message, and pushes to the remote repository. It’s a super convenient way to quickly commit all your changes with a single command.</p> <p>By incorporating these aliases and functions into your <code class="language-plaintext highlighter-rouge">.bashrc</code> or <code class="language-plaintext highlighter-rouge">.bash_profile</code>, you can reduce the amount of typing and save time, working smarter not harder!</p>]]></content><author><name></name></author><category term="tips-and-tricks"/><category term="bioinformatics"/><category term="bash"/><summary type="html"><![CDATA[A collection of handy shortcuts to speed up your work on the command line.]]></summary></entry><entry><title type="html">Getting Started with the Bash Command Line</title><link href="https://rj-price.github.io/blog/2024/bash/" rel="alternate" type="text/html" title="Getting Started with the Bash Command Line"/><published>2024-07-22T00:00:00+00:00</published><updated>2024-07-22T00:00:00+00:00</updated><id>https://rj-price.github.io/blog/2024/bash</id><content type="html" xml:base="https://rj-price.github.io/blog/2024/bash/"><![CDATA[<p>The Bash command line is an essential tool for bioinformaticians, programmers, and system administrators alike. It provides a powerful interface to interact with your computer, allowing you to perform a variety of tasks efficiently. Whether you’re managing files, running scripts, or configuring systems, mastering the Bash command line will greatly enhance your productivity. In this short guide, we’ll cover the basics of working with Bash to get you up and running as quickly as possible.</p> <p><br/></p> <h2 id="what-is-bash">What is Bash?</h2> <p>Bash (Bourne Again SHell) is a Unix shell and command language that is widely used as the default login shell on Linux and macOS systems. Bash allows users to execute commands, automate tasks using scripts, and manage system resources.</p> <p><br/></p> <h2 id="getting-started">Getting Started</h2> <p>To start using Bash, you need to open a terminal window:</p> <ul> <li><strong>Linux</strong>: Search for “Terminal” in your applications menu.</li> <li><strong>macOS</strong>: Open “Terminal” from the Applications &gt; Utilities folder.</li> <li><strong>Windows</strong>: Install a Unix-like environment like Git Bash or Windows Subsystem for Linux (WSL).</li> </ul> <p><br/></p> <h2 id="basic-commands">Basic Commands</h2> <p>Here are some basic commands to get you started:</p> <ol> <li><strong>Navigating Directories</strong> <ul> <li> <p><code class="language-plaintext highlighter-rouge">pwd</code> (print working directory): Displays the full path of the current directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">pwd</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">ls</code> (list): Lists files and directories in the current directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">ls</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">cd</code> (change directory): Changes the current directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cd</span> /path/to/directory
</code></pre></div> </div> </li> </ul> </li> <li><strong>File Operations</strong> <ul> <li> <p><code class="language-plaintext highlighter-rouge">touch</code>: Creates a new empty file with the specified name.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">touch </span>filename.txt
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">cp</code> (copy): Copies files or directories from source to destination.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cp </span>source.txt destination.txt
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">mv</code> (move): Moves or renames files or directories from source to destination.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mv </span>oldname.txt newname.txt
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">rm</code> (remove): Deletes files or directories.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">rm </span>filename.txt
</code></pre></div> </div> </li> </ul> </li> <li><strong>Viewing and Editing Files</strong> <ul> <li> <p><code class="language-plaintext highlighter-rouge">cat</code> (concatenate): Prints the contents of a file to the terminal.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cat </span>filename.txt
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">nano</code> or <code class="language-plaintext highlighter-rouge">vi</code>: Opens a file in a text editor.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  nano filename.txt
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">head</code> and <code class="language-plaintext highlighter-rouge">tail</code>: View specific number of lines <code class="language-plaintext highlighter-rouge">-n</code> from the start or end of a file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">head</span> <span class="nt">-n</span> 50 filename.txt
  <span class="nb">tail</span> <span class="nt">-n</span> 50 filename.txt
</code></pre></div> </div> </li> </ul> </li> <li><strong>Managing Directories</strong> <ul> <li> <p><code class="language-plaintext highlighter-rouge">mkdir</code> (make directory): Creates a new directory with the specified name.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">mkdir </span>new_directory
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">rmdir</code> (remove directory): Deletes an empty directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">rmdir </span>directory_name
</code></pre></div> </div> </li> </ul> </li> <li><strong>System Information</strong> <ul> <li> <p><code class="language-plaintext highlighter-rouge">whoami</code>: Displays the current user.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">whoami</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">uname -a</code>: Displays system information.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">uname</span> <span class="nt">-a</span>
</code></pre></div> </div> </li> </ul> </li> <li><strong>Getting Help</strong> <ul> <li> <p><code class="language-plaintext highlighter-rouge">man</code> (manual): Displays the manual page for a command.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  man <span class="nb">ls</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">-help</code>: Provides a brief description of how to use a command.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">ls</span> <span class="nt">--help</span>
</code></pre></div> </div> </li> </ul> </li> </ol> <p><br/></p> <h2 id="redirection-and-pipes">Redirection and Pipes</h2> <p>One of the main advantages of using Bash is that it allows you to redirect the output of commands and chain multiple commands together using pipes.</p> <ol> <li><strong>Redirection</strong> <ul> <li> <p><code class="language-plaintext highlighter-rouge">&gt;</code>: Redirects output to a file, overwriting the file if it exists.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hello, World!"</span> <span class="o">&gt;</span> output.txt
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;</code>: Redirects output to a file, appending to the file if it exists.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">echo</span> <span class="s2">"Hello again!"</span> <span class="o">&gt;&gt;</span> output.txt
</code></pre></div> </div> </li> </ul> </li> <li><strong>Pipes</strong> <ul> <li> <p><code class="language-plaintext highlighter-rouge">|</code>: Passes the output of one command as input to another command.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">ls</span> | <span class="nb">grep</span> <span class="s2">"filename"</span>
</code></pre></div> </div> </li> </ul> </li> </ol> <p><br/></p> <h2 id="useful-tips-and-tricks">Useful Tips and Tricks</h2> <ol> <li><strong>Tab Completion</strong> <ul> <li>Press <code class="language-plaintext highlighter-rouge">Tab</code> to autocomplete file and directory names.</li> </ul> </li> <li><strong>Command History</strong> <ul> <li>Use the <code class="language-plaintext highlighter-rouge">Up</code> and <code class="language-plaintext highlighter-rouge">Down</code> arrow keys to navigate through previous commands.</li> </ul> </li> <li><strong>Special Characters</strong> <ul> <li><code class="language-plaintext highlighter-rouge">.</code>: Current directory</li> <li><code class="language-plaintext highlighter-rouge">..</code>: Parent directory</li> <li><code class="language-plaintext highlighter-rouge">~</code>: Home directory</li> <li><code class="language-plaintext highlighter-rouge">/</code>: Root directory</li> </ul> </li> <li><strong>Aliases</strong> <ul> <li> <p>Create shortcuts for frequently used commands by adding aliases to your <code class="language-plaintext highlighter-rouge">.bashrc</code> or <code class="language-plaintext highlighter-rouge">.bash_profile</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  alias ll='ls -la'
</code></pre></div> </div> </li> </ul> </li> <li><strong>Environment Variables</strong> <ul> <li> <p>Set and use environment variables to store and reuse information.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  export MY_VAR="Hello"
  echo $MY_VAR
</code></pre></div> </div> </li> </ul> </li> </ol> <p><br/></p> <h2 id="summary">Summary</h2> <p>The Bash command line is a powerful tool that can significantly enhance your efficiency and productivity. By mastering directory navigation, file manipulation and understanding redirection and pipes you’ll be well on your way to becoming proficient in using Bash. Whether you’re managing files, automating tasks, or configuring systems, the command line is an indispensable part of your toolkit.</p>]]></content><author><name></name></author><category term="getting-started"/><category term="bioinformatics"/><category term="bash"/><summary type="html"><![CDATA[A quick and easy guide to help getting started with using the command line.]]></summary></entry><entry><title type="html">Getting Started with BLAST on the Command Line</title><link href="https://rj-price.github.io/blog/2024/blast/" rel="alternate" type="text/html" title="Getting Started with BLAST on the Command Line"/><published>2024-07-15T00:00:00+00:00</published><updated>2024-07-15T00:00:00+00:00</updated><id>https://rj-price.github.io/blog/2024/blast</id><content type="html" xml:base="https://rj-price.github.io/blog/2024/blast/"><![CDATA[<p>Bioinformatics relies heavily on sequence identification by comparing nucleotide or protein sequences against known databases. One of the most popular tools for this purpose is BLAST (Basic Local Alignment Search Tool). In this blog post, we’ll explore the basics of using BLAST on the command line, focusing on the two most common types of searches: <code class="language-plaintext highlighter-rouge">blastn</code> and <code class="language-plaintext highlighter-rouge">blastp</code>. We’ll also cover how to perform searches against the NCBI databases, as well as creating and searching a custom local database.</p> <p><br/></p> <h2 id="what-is-blast">What is BLAST?</h2> <p>BLAST is a powerful algorithm and software suite from NCBI that allows you to compare a query sequence against a database of sequences to find regions of similarity. This can help identify homologous genes, infer functional and evolutionary relationships, and discover new genes.</p> <p><br/></p> <h2 id="types-of-blast-searches">Types of BLAST Searches</h2> <p>There are several types of BLAST searches, the two most common are:</p> <ol> <li><strong>blastn</strong>: Compares a nucleotide query sequence against a nucleotide sequence database.</li> <li><strong>blastp</strong>: Compares an amino acid query sequence against a protein sequence database.</li> </ol> <p><br/></p> <h2 id="setting-up-blast">Setting Up BLAST</h2> <p>To get started, you’ll need to install the BLAST+ command line tools. You can either download the source files from the <a href="https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/">NCBI BLAST+ download page</a> or install them though <a href="https://anaconda.org/bioconda/blast">conda</a>.</p> <p>If using the source files, make sure that you extract the files and add the BLAST directory to your system’s PATH to use the BLAST commands from any directory.</p> <p><br/></p> <h2 id="running-blast-searches-against-ncbi-databases">Running BLAST Searches Against NCBI Databases</h2> <h3 id="1-using-blastn">1. Using <code class="language-plaintext highlighter-rouge">blastn</code></h3> <p>Let’s start with a <code class="language-plaintext highlighter-rouge">blastn</code> example. Suppose you have a nucleotide sequence in a file called <code class="language-plaintext highlighter-rouge">gene.fasta</code> and you want to identify the closest matching hits to your gene of interest in the NCBI nucleotide database:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blastn <span class="nt">-query</span> gene.fasta <span class="nt">-remote</span> <span class="nt">-db</span> nt <span class="nt">-out</span> results_blastn.txt <span class="nt">-evalue</span> 1e-6 <span class="nt">-outfmt</span> 6
</code></pre></div></div> <p>This command performs a nucleotide BLAST search of your nucleotide sequence <code class="language-plaintext highlighter-rouge">-query gene.fasta</code> against the NCBI nucleotide database <code class="language-plaintext highlighter-rouge">-remote -db nt</code> and saves the results with an E-value lower than <code class="language-plaintext highlighter-rouge">1e-6</code> in the output file <code class="language-plaintext highlighter-rouge">results_blastn.txt</code> formatted as a table <code class="language-plaintext highlighter-rouge">-outfmt 6</code>.</p> <p><br/></p> <h3 id="2-using-blastp">2. Using <code class="language-plaintext highlighter-rouge">blastp</code></h3> <p>Next, we’ll run a <code class="language-plaintext highlighter-rouge">blastp</code> search with a protein sequence file called <code class="language-plaintext highlighter-rouge">protein.fasta</code> to identify the best hits in the NCBI non-redundant protein database:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blastp <span class="nt">-query</span> protein.fasta <span class="nt">-remote</span> <span class="nt">-db</span> nr <span class="nt">-out</span> results_blastp.txt <span class="nt">-evalue</span> 1e-6 <span class="nt">-outfmt</span> 6
</code></pre></div></div> <p>This performs a protein BLAST search of your protein sequence <code class="language-plaintext highlighter-rouge">-query protein.fasta</code> against the NCBI non-redundant protein database <code class="language-plaintext highlighter-rouge">-remote -db nr</code> and saves the results with an E-value lower than <code class="language-plaintext highlighter-rouge">1e-6</code> in the output file <code class="language-plaintext highlighter-rouge">results_blastp.txt</code> formatted as a table <code class="language-plaintext highlighter-rouge">-outfmt 6</code>.</p> <p><br/></p> <h2 id="creating-and-searching-a-custom-local-database">Creating and Searching a Custom Local Database</h2> <p>Sometimes, you may want to perform searches against a custom database. For example, you may have a known gene that you’d like to identify the homolog of in a <em>de novo</em> assembly. Here’s how you can create and search a local custom BLAST database.</p> <h3 id="1-creating-a-custom-database">1. Creating a Custom Database</h3> <p>First, gather your sequences in a FASTA file, for example, <code class="language-plaintext highlighter-rouge">my_sequences.fasta</code>.</p> <p>To create a nucleotide database:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>makeblastdb <span class="nt">-in</span> my_sequences.fasta <span class="nt">-dbtype</span> nucl <span class="nt">-out</span> my_custom_db
</code></pre></div></div> <p>For a protein database:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>makeblastdb <span class="nt">-in</span> my_sequences.fasta <span class="nt">-dbtype</span> prot <span class="nt">-out</span> my_custom_db
</code></pre></div></div> <p><br/></p> <h3 id="2-running-a-blast-search-against-the-custom-database">2. Running a BLAST Search Against the Custom Database</h3> <p>Now, you can run BLAST searches against your custom database. For example, using <code class="language-plaintext highlighter-rouge">blastn</code> with your custom nucleotide database:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blastn <span class="nt">-query</span> gene.fasta <span class="nt">-db</span> my_custom_db <span class="nt">-out</span> custom_results_blastn.txt <span class="nt">-evalue</span> 1e-6 <span class="nt">-outfmt</span> 6
</code></pre></div></div> <p>Or using <code class="language-plaintext highlighter-rouge">blastp</code> with your custom protein database:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blastp <span class="nt">-query</span> protein.fasta <span class="nt">-db</span> my_custom_db <span class="nt">-out</span> custom_results_blastp.txt <span class="nt">-evalue</span> 1e-6 <span class="nt">-outfmt</span> 6
</code></pre></div></div> <p><br/></p> <h2 id="interpreting-blast-results">Interpreting BLAST Results</h2> <p>BLAST results help determine the potential function of your query sequence by identifying similar sequences in known databases. When using the <code class="language-plaintext highlighter-rouge">-outfmt 6</code> flag to output the results in a tabular format, the data in the columns are represented by the following headers:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore
</code></pre></div></div> <p>1.  <strong>qseqid:</strong> Identifier of the query sequence.</p> <p>2.  <strong>sseqid:</strong> Identifier of the subject sequence that matches your query.</p> <p>3.  <strong>pident:</strong> Percentage of identical matches between the query and subject sequences.</p> <p>4.  <strong>length:</strong> Total alignment length between the query and subject sequences.</p> <p>5.  <strong>mismatch:</strong> Number of positions that are mismatches.</p> <p>6.  <strong>gapopen:</strong> Number of gap openings in the alignment.</p> <p>7.  <strong>qstart:</strong> Start position of the alignment for the query sequence.</p> <p>8.  <strong>qend:</strong> End position of the alignment for the query sequence.</p> <p>9.  <strong>sstart:</strong> Start position of the alignment for the subject sequence.</p> <p>10.  <strong>send:</strong> End position of the alignment for the subject sequence.</p> <p>11.  <strong>evalue:</strong> The number of expected hits of similar quality (lower is better).</p> <p>12.  <strong>bitscore:</strong> The higher the bit-score, the better the sequence similarity.</p> <p><br/></p> <h2 id="summary">Summary</h2> <p>BLAST is an essential tool in bioinformatics for sequence identification and comparison. By understanding how to use <code class="language-plaintext highlighter-rouge">blastn</code> and <code class="language-plaintext highlighter-rouge">blastp</code>, and knowing how to create and search a custom database, you can leverage BLAST to gain significant insights into your sequences. Whether you are searching the NCBI databases or your custom datasets, BLAST provides the versatility and power needed for effective sequence analysis.</p> <p>To learn more about the functions and features of the BLAST+ command line tools, take a look at the <a href="https://www.ncbi.nlm.nih.gov/books/NBK279690/">User Manual</a> or use the <code class="language-plaintext highlighter-rouge">-help</code> flag to learn more about the possible arguments for each search.</p>]]></content><author><name></name></author><category term="getting-started"/><category term="bioinformatics"/><category term="blast"/><summary type="html"><![CDATA[A guide to help getting started with using the basic functions of BLAST on the command line.]]></summary></entry></feed>